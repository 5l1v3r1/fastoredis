IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(OS_LINUX ON)
    SET(OS_POSIX ON)
    ADD_DEFINITIONS(-DOS_LINUX -DOS_POSIX)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    SET(OS_MACOSX ON)
    SET(OS_POSIX ON)
    ADD_DEFINITIONS(-DOS_MACOSX -DOS_POSIX)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    SET(OS_WINDOWS ON)
    ADD_DEFINITIONS(-D_WIN32 -DOS_WIN -DOS_WINDOWS)
ELSE()
    MESSAGE(FATAL_ERROR "Not supported OS: ${CMAKE_SYSTEM_NAME}")
ENDIF()

IF(USE_CXX_STANDART)
    ADD_DEFINITIONS(-DHAVE_CXX_STANDART)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSE(USE_CXX_STANDART)
    FIND_PACKAGE(Threads)

    #  CMAKE_THREAD_LIBS_INIT     - the thread library
    #  CMAKE_USE_SPROC_INIT       - are we using sproc?
    #  CMAKE_USE_WIN32_THREADS_INIT - using WIN32 threads?
    #  CMAKE_USE_PTHREADS_INIT    - are we using pthreads
    #  CMAKE_HP_PTHREADS_INIT     - are we using hp pthreads

    IF(CMAKE_USE_PTHREADS_INIT)
        SET(USE_PTHREAD ON)
        ADD_DEFINITIONS(-DHAVE_PTHREAD)
    ENDIF(CMAKE_USE_PTHREADS_INIT)

    MESSAGE(STATUS "CMAKE_USE_PTHREADS_INIT : ${CMAKE_USE_PTHREADS_INIT}")
ENDIF(USE_CXX_STANDART)

IF(CMAKE_CXX_COMPILER_ID MATCHES ".*Clang")
    SET(CMAKE_COMPILER_IS_CLANGCXX 1)
ENDIF()

IF(CMAKE_COMPILER_IS_CLANGCXX)
    ADD_DEFINITIONS(-DCOMPILER_CLANG)
ELSEIF (CMAKE_COMPILER_IS_GNUCXX)
    ADD_DEFINITIONS(-DCOMPILER_GCC)
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    ADD_DEFINITIONS(-DCOMPILER_INTEL)
ELSEIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    ADD_DEFINITIONS(-DCOMPILER_MSVC)
ELSE()
    MESSAGE(FATAL_ERROR "Not supported compiler id: ${CMAKE_CXX_COMPILER_ID}")
ENDIF()

MESSAGE(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "CMAKE_SYSTEM: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")

IF (CMAKE_BUILD_TYPE)
    STRING(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_STABLE) 
    MESSAGE(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE_STABLE}")
ENDIF(CMAKE_BUILD_TYPE)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/")
IF(NOT CMAKE_DEBUG_POSTFIX)
    SET(CMAKE_DEBUG_POSTFIX d)
ENDIF()
INCLUDE(cmake/projecthelper.cmake)
INCLUDE(cmake/utils.cmake)

IF(BOOST_ENABLED)
    ADD_DEFINITIONS(-DBOOST_ENABLED)
    INCLUDE(${CMAKE_CURRENT_LIST_DIR}/integrate-boost.cmake)
    SET(Boost_USE_MULTITHREADED ON)
    SET(Boost_USE_STATIC_LIBS ON)
ENDIF(BOOST_ENABLED)

IF(USE_CXX_STANDART)
    ADD_DEFINITIONS(-DHAVE_CXX_STANDART)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ENDIF(USE_CXX_STANDART)

IF(PYTHON_ENABLED)
    ADD_DEFINITIONS(-DPYTHON_ENABLED)
ENDIF(PYTHON_ENABLED)

IF(QT_ENABLED)
    INCLUDE(${CMAKE_CURRENT_LIST_DIR}/integrate-qt.cmake)
    ADD_DEFINITIONS(-DQT_SUPPORT_ENABLED)
ENDIF(QT_ENABLED)

IF(DEVELOPER_ENABLE_TESTS)
    INCLUDE(cmake/testing.cmake)
    SETUP_TESTING()
ENDIF(DEVELOPER_ENABLE_TESTS)

MACRO(ADD_APP_EXECUTABLE PROJ_NAME SOURCES LIBS)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${BUILD_TYPE}/build)

    SET(TARGET ${PROJ_NAME})
    ADD_EXECUTABLE(${TARGET} ${DESKTOP_TARGET} ${SOURCES})
    TARGET_LINK_LIBRARIES(${TARGET} ${LIBS})
    IF ("${CMAKE_BUILD_TYPE_STABLE}" STREQUAL "RELEASE")
        SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_RELEASE}")
    ELSE()
        SET_TARGET_PROPERTIES(${TARGET} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG}")
    ENDIF()
ENDMACRO()

MACRO(ADD_APP_LIBRARY LIB_NAME SOURCES LIBS)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${BUILD_TYPE}/build)

    SET(TARGET_LIB ${LIB_NAME})
    ADD_LIBRARY(${TARGET_LIB} STATIC ${SOURCES})
    TARGET_LINK_LIBRARIES(${TARGET_LIB} ${LIBS})
    IF ("${CMAKE_BUILD_TYPE_STABLE}" STREQUAL "RELEASE")
        SET_TARGET_PROPERTIES(${TARGET_LIB} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_RELEASE}")
    ELSE()
        SET_TARGET_PROPERTIES(${TARGET_LIB} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG}")
    ENDIF()
ENDMACRO()

MACRO(ADD_APP_LIBRARY_OBJECT LIB_NAME SOURCES LIBS LIB_OBJECTS)
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${BUILD_TYPE}/build)

    SET(TARGET_LIB ${LIB_NAME})
    ADD_LIBRARY(${TARGET_LIB} STATIC ${SOURCES} ${LIB_OBJECTS})
    TARGET_LINK_LIBRARIES(${TARGET_LIB} ${LIBS})
    IF ("${CMAKE_BUILD_TYPE_STABLE}" STREQUAL "RELEASE")
        SET_TARGET_PROPERTIES(${TARGET_LIB} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_RELEASE}")
    ELSE()
        SET_TARGET_PROPERTIES(${TARGET_LIB} PROPERTIES COMPILE_FLAGS "${CMAKE_CXX_FLAGS_DEBUG}")
    ENDIF()
ENDMACRO()
